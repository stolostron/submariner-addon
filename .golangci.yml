---
version: "2"
linters:
  default: none
  enable:
    - asasalint
    - asciicheck
    - bidichk
    - bodyclose
    # - canonicalheader # This is a slow linter and we don't use the net/http.Header API
    - containedctx
    - contextcheck
    - copyloopvar
    # - cyclop # This is equivalent to gocyclo
    - decorder
    # - depguard # depguard now denies by default, it should only be enabled if we actually use it
    - dogsled
    - dupl
    - dupword
    - durationcheck
    - err113
    - errcheck
    - errchkjson
    - errname
    - errorlint
    - exhaustive
    # - exhaustruct # This is too cumbersome as it requires all string, int, pointer et al fields to be initialized even when the
    # type's default suffices, which is most of the time
    - exptostd
    - fatcontext
    # - forbidigo # We don't forbid any statements
    # - forcetypeassert # There are many unchecked type assertions that would be the result of a programming error so the
    #                     reasonable recourse would be to panic anyway if checked so this doesn't seem useful
    # - funcorder # TODO Evaluate whether this is worth it
    # - funlen # gocyclo is enabled which is generally a better metric than simply LOC.
    - ginkgolinter
    - gocheckcompilerdirectives
    # - gochecknoglobals # We don't want to forbid global variable constants
    # - gochecknoinits # We use init functions for valid reasons
    # - gochecksumtype # The usefulness is very narrow
    - gocognit
    - goconst
    - gocritic
    - gocyclo
    - godot
    # - godox #  Let's not forbid inline TODOs, FIXMEs et al
    # - goheader # We do license header linting another way
    # - gomoddirectives # We don't want to forbid the 'replace' directive
    # - gomodguard # We don't block any modules
    # - goprintffuncname # This doesn't seem useful at all
    - gosec
    # - gosmopolitan # This is related to internationalization which is not a concern for us
    - govet
    - grouper
    - iface
    - importas
    - inamedparam
    - ineffassign
    # - interfacebloat # We track complexity elsewhere
    # - ireturn # The argument to always "Return Concrete Types" doesn't seem compelling. It is perfectly valid to return
    #             an interface to avoid exposing the entire underlying struct
    - lll
    - loggercheck
    - maintidx
    - makezero
    - mirror
    - misspell
    # - mnd # (v1 - gomnd) It doesn't seem useful in general to enforce constants for all numeric values
    - musttag
    - nakedret
    # - nestif # This calculates cognitive complexity but we're doing that elsewhere
    - nilerr
    - nilnesserr
    - nilnil
    # - nlreturn # This is reasonable with a block-size of 2 but setting it above isn't honored
    # - noctx # We don't send HTTP requests
    - nolintlint
    - nonamedreturns
    - nosprintfhostport
    # - paralleltest # Not relevant for Ginkgo UTs
    - prealloc
    - predeclared
    - promlinter
    # - protogetter # We don't use protobuf
    - reassign
    - revive
    # - rowserrcheck # We don't use SQL
    # - sloglint # We don't use log/slog
    # - spancheck # We don't use OpenTelemetry/OpenCensus
    # - sqlclosecheck # We don't use SQL
    - staticcheck
    - tagalign
    # - tagliatelle # Inconsistent with stylecheck and not as good
    # - testableexamples # We don't need this
    # - testifylint # We don't use testify
    - testableexamples
    - testpackage
    # - thelper # Not relevant for our Ginkgo UTs
    # - tparallel # Not relevant for our Ginkgo UTs
    - unconvert
    - unparam
    - unused
    - usestdlibvars
    - usetesting
    # - varnamelen # It doesn't seem necessary to enforce a minimum variable name length
    - wastedassign
    - whitespace
    # - wrapcheck # Fix and enable
    - wsl
  settings:
    gocritic:
      disabled-checks:
        - ifElseChain
        - unnamedResult
      enabled-tags:
        - diagnostic
        - opinionated
        - performance
        - style
    gocyclo:
      min-complexity: 15
    govet:
      enable:
        - fieldalignment
    lll:
      line-length: 140
    nlreturn:
      block-size: 2
    revive:
      rules:
        - name: dot-imports
          arguments:
            - allowed-packages: ["github.com/onsi/ginkgo/v2", "github.com/onsi/gomega", "github.com/submariner-io/admiral/pkg/gomega"]
    staticcheck:
      dot-import-whitelist:
        - github.com/onsi/ginkgo/v2
        - github.com/onsi/gomega
      checks:
        # Defaults
        - all
        - -ST1000
        - -ST1003
        - -ST1016
        - -ST1020
        - -ST1021
        - -ST1022
        # Allow if/else constructs that could be switches
        - -QF1003
        # Allow unnecessary embedded field selectors
        - -QF1008
    wsl:
      # Separating explicit var declarations by blank lines seems excessive.
      allow-cuddle-declarations: true
  exclusions:
    generated: lax
    presets:
      - comments
      - common-false-positives
      - legacy
      - std-error-handling
    rules:
      # Separating explicit var declarations by blank lines seems excessive.
      - linters:
          - wsl
        text: declarations should never be cuddled

      # This rule incorrectly flags code where two logically-related lines are
      # followed by an if conditional to check their err return.
      - linters:
          - wsl
        text: only one cuddle assignment allowed before if statement

      # This rule incorrectly flags code where two logically-related lines are
      # used to create vars that are consumed in a loop.
      - linters:
          - wsl
        text: only one cuddle assignment allowed before range statement

      # Ignore pointer bytes in struct alignment tests (this is a very
      # minor optimisation)
      - linters:
          - govet
        text: pointer bytes could be

      # Ignore any failures in auto-generated files
      - linters:
          - godot
          - lll
          - revive
          - staticcheck
        path: swagger_doc_generated\.go

      # Full text of the error is "do not define dynamic errors, use wrapped static errors instead". See
      # https://github.com/Djarvur/go-err113/issues/10 for an interesting discussion of this error. While there are cases
      # where wrapped sentinel errors are useful, it seems a bit pedantic to force that pattern in all cases.
      - linters:
          - err113
        text: do not define dynamic errors

      # Ignore certain linters for test files
      - linters:
          - err113
          - gochecknoinits
          - wrapcheck
        path: _test\.go|test/|fake/
    paths:
      - third_party$
      - builtin$
      - examples$
formatters:
  enable:
    - gci
    - gofmt
    - gofumpt
    - goimports
  exclusions:
    generated: lax
    paths:
      - third_party$
      - builtin$
      - examples$